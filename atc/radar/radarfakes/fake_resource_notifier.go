// Code generated by counterfeiter. DO NOT EDIT.
package radarfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
	"github.com/concourse/concourse/atc/radar"
)

type FakeResourceNotifier struct {
	IDStub        func() int
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 int
	}
	iDReturnsOnCall map[int]struct {
		result1 int
	}
	ScanNotifierStub        func() (db.Notifier, error)
	scanNotifierMutex       sync.RWMutex
	scanNotifierArgsForCall []struct {
	}
	scanNotifierReturns struct {
		result1 db.Notifier
		result2 error
	}
	scanNotifierReturnsOnCall map[int]struct {
		result1 db.Notifier
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceNotifier) ID() int {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *FakeResourceNotifier) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeResourceNotifier) IDCalls(stub func() int) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeResourceNotifier) IDReturns(result1 int) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeResourceNotifier) IDReturnsOnCall(i int, result1 int) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeResourceNotifier) ScanNotifier() (db.Notifier, error) {
	fake.scanNotifierMutex.Lock()
	ret, specificReturn := fake.scanNotifierReturnsOnCall[len(fake.scanNotifierArgsForCall)]
	fake.scanNotifierArgsForCall = append(fake.scanNotifierArgsForCall, struct {
	}{})
	fake.recordInvocation("ScanNotifier", []interface{}{})
	fake.scanNotifierMutex.Unlock()
	if fake.ScanNotifierStub != nil {
		return fake.ScanNotifierStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.scanNotifierReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResourceNotifier) ScanNotifierCallCount() int {
	fake.scanNotifierMutex.RLock()
	defer fake.scanNotifierMutex.RUnlock()
	return len(fake.scanNotifierArgsForCall)
}

func (fake *FakeResourceNotifier) ScanNotifierCalls(stub func() (db.Notifier, error)) {
	fake.scanNotifierMutex.Lock()
	defer fake.scanNotifierMutex.Unlock()
	fake.ScanNotifierStub = stub
}

func (fake *FakeResourceNotifier) ScanNotifierReturns(result1 db.Notifier, result2 error) {
	fake.scanNotifierMutex.Lock()
	defer fake.scanNotifierMutex.Unlock()
	fake.ScanNotifierStub = nil
	fake.scanNotifierReturns = struct {
		result1 db.Notifier
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceNotifier) ScanNotifierReturnsOnCall(i int, result1 db.Notifier, result2 error) {
	fake.scanNotifierMutex.Lock()
	defer fake.scanNotifierMutex.Unlock()
	fake.ScanNotifierStub = nil
	if fake.scanNotifierReturnsOnCall == nil {
		fake.scanNotifierReturnsOnCall = make(map[int]struct {
			result1 db.Notifier
			result2 error
		})
	}
	fake.scanNotifierReturnsOnCall[i] = struct {
		result1 db.Notifier
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceNotifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.scanNotifierMutex.RLock()
	defer fake.scanNotifierMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceNotifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ radar.ResourceNotifier = new(FakeResourceNotifier)
